spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s #durée max pour terminer le traitement des req en cours avant arrêt
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      max-create-connection-time: 2s # temps max pour obtenir une connexion depuis le pool
      initial-size: 5
      max-size: 10 # défaut
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order
  cloud:
    function:
      definition: consumeOrderDispatchedMessages #déclaration de la prise en charge de la fonction par SCF
    stream:
      bindings:
        consumeOrderDispatchedMessages-in-0: #config de l'input binding - nom dérivé de la fonction SCF associée
          destination: order-dispatched #l'exchange dans lequel les messages à destination d'order-services sont envoyés par dispatcher-service
          group: ${spring.application.name} # queue :order-dispatched.order-service - créé lors du déploiement du consommateur order-service
        #config du binding créé au démarrage (par le binder SCS)
        acceptOrder-out-0:
          destination: order-accepted #exchange dans lequel OrderService publie les messages notifiant de l'acceptation de la commande
      rabbit: #config spécifique du binding pour RabbitMQ
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true #intégration du binding dans la transaction
  #config de l'intégration avec RabbitMQ
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s

server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
polar:
  catalog-service-uri: "http://localhost:9001"
  #externalisation des valeurs de configuration de la résilience Reactor
  timeout: 3
  max-retry: 3
  retry-backoff: 100
